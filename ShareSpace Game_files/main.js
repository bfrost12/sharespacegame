'use strict';
window.app = angular.module('FullstackGeneratedApp', ['fsaPreBuilt', 'ui.router', 'ui.bootstrap', 'ngAnimate']);

app.config(function ($urlRouterProvider, $locationProvider) {
    // This turns off hashbang urls (/#about) and changes it to something normal (/about)
    $locationProvider.html5Mode(true);
    // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
    $urlRouterProvider.otherwise('/');
});

// This app.run is for controlling access to specific states.
app.run(function ($rootScope, AuthService, $state) {

    // The given state requires an authenticated user.
    var destinationStateRequiresAuth = function destinationStateRequiresAuth(state) {
        return state.data && state.data.authenticate;
    };

    // $stateChangeStart is an event fired
    // whenever the process of changing a state begins.
    $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {

        if (!destinationStateRequiresAuth(toState)) {
            // The destination state does not require authentication
            // Short circuit with return.
            return;
        }

        if (AuthService.isAuthenticated()) {
            // The user is authenticated.
            // Short circuit with return.
            return;
        }

        // Cancel navigating to new state.
        event.preventDefault();

        AuthService.getLoggedInUser().then(function (user) {
            // If a user is retrieved, then renavigate to the destination
            // (the second time, AuthService.isAuthenticated() will work)
            // otherwise, if no user is logged in, go to "login" state.
            if (user) {
                $state.go(toState.name, toParams);
            } else {
                $state.go('login');
            }
        });
    });
});

app.controller('GameController', function ($scope, game, GameFactory) {
    $scope.game = game;
    $scope.deck = game.deck;
    $scope.currentCard = null;
    $scope.currentAnswers = [];
    $scope.round = 0;

    //game functions
    $scope.loadNextCard = function () {
        if ($scope.round === $scope.deck.length) {
            console.log("The Game is Over! No more cards");
            //Replace this with a gameOver() function later!
        } else {
                $scope.currentCard = $scope.deck[$scope.round];
                $scope.round++;
            }
    };
});
app.factory('GameFactory', function ($http) {
    function startNewGame(settings) {
        return $http.post('/api/game/newGame', settings).then(function (res) {
            return res.data;
        });
    }

    function addNewPlayer(name) {
        return $http.post('/api/game/newPlayer', name).then(function (res) {
            this.players.push(res.data);
        });
    }

    return {
        startNewGame: startNewGame
    };
});
app.config(function ($stateProvider) {
    $stateProvider.state('play', {
        url: '/play',
        templateUrl: 'js/game/game.html',
        resolve: {
            game: function game(GameFactory) {
                var testSettings = {
                    "leader": "fakePlayerID",
                    "maxPlayers": 5,
                    "numRounds": 4
                };
                return GameFactory.startNewGame(testSettings);
            }
        },
        controller: 'GameController'
    });
});
(function () {

    'use strict';

    // Hope you didn't forget Angular! Duh-doy.
    if (!window.angular) throw new Error('I can\'t find Angular!');

    var app = angular.module('fsaPreBuilt', []);

    app.factory('Socket', function () {
        if (!window.io) throw new Error('socket.io not found!');
        return window.io(window.location.origin);
    });

    // AUTH_EVENTS is used throughout our app to
    // broadcast and listen from and to the $rootScope
    // for important events about authentication flow.
    app.constant('AUTH_EVENTS', {
        loginSuccess: 'auth-login-success',
        loginFailed: 'auth-login-failed',
        logoutSuccess: 'auth-logout-success',
        sessionTimeout: 'auth-session-timeout',
        notAuthenticated: 'auth-not-authenticated',
        notAuthorized: 'auth-not-authorized'
    });

    app.factory('AuthInterceptor', function ($rootScope, $q, AUTH_EVENTS) {
        var statusDict = {
            401: AUTH_EVENTS.notAuthenticated,
            403: AUTH_EVENTS.notAuthorized,
            419: AUTH_EVENTS.sessionTimeout,
            440: AUTH_EVENTS.sessionTimeout
        };
        return {
            responseError: function responseError(response) {
                $rootScope.$broadcast(statusDict[response.status], response);
                return $q.reject(response);
            }
        };
    });

    app.config(function ($httpProvider) {
        $httpProvider.interceptors.push(['$injector', function ($injector) {
            return $injector.get('AuthInterceptor');
        }]);
    });

    app.service('AuthService', function ($http, Session, $rootScope, AUTH_EVENTS, $q) {

        function onSuccessfulLogin(response) {
            var data = response.data;
            Session.create(data.id, data.user);
            $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
            return data.user;
        }

        // Uses the session factory to see if an
        // authenticated user is currently registered.
        this.isAuthenticated = function () {
            return !!Session.user;
        };

        this.getLoggedInUser = function (fromServer) {

            // If an authenticated session exists, we
            // return the user attached to that session
            // with a promise. This ensures that we can
            // always interface with this method asynchronously.

            // Optionally, if true is given as the fromServer parameter,
            // then this cached value will not be used.

            if (this.isAuthenticated() && fromServer !== true) {
                return $q.when(Session.user);
            }

            // Make request GET /session.
            // If it returns a user, call onSuccessfulLogin with the response.
            // If it returns a 401 response, we catch it and instead resolve to null.
            return $http.get('/session').then(onSuccessfulLogin)['catch'](function () {
                return null;
            });
        };

        this.login = function (credentials) {
            return $http.post('/login', credentials).then(onSuccessfulLogin)['catch'](function () {
                return $q.reject({ message: 'Invalid login credentials.' });
            });
        };

        this.logout = function () {
            return $http.get('/logout').then(function () {
                Session.destroy();
                $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
            });
        };
    });

    app.service('Session', function ($rootScope, AUTH_EVENTS) {

        var self = this;

        $rootScope.$on(AUTH_EVENTS.notAuthenticated, function () {
            self.destroy();
        });

        $rootScope.$on(AUTH_EVENTS.sessionTimeout, function () {
            self.destroy();
        });

        this.id = null;
        this.user = null;

        this.create = function (sessionId, user) {
            this.id = sessionId;
            this.user = user;
        };

        this.destroy = function () {
            this.id = null;
            this.user = null;
        };
    });
})();

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: 'js/home/home.html'
    });
});
app.directive('card', function () {
    return {
        restrict: 'E',
        scope: {
            color: '@',
            answers: '@',
            title: '@',
            prompt: '@',
            points: '@'
        },
        link: function link(scope, element, attrs) {
            $('.special.cards .image').dimmer({
                on: 'hover'
            });
            scope.getCardColor = function () {
                return 'js/common/directives/cards/' + attrs.color + 'card.html';
            };
        },
        template: '<div ng-include="getCardColor()"></div>'
    };
});

app.directive('orangeCard', function () {
    return {
        restrict: 'E',
        templateUrl: 'js/common/directives/cards/orangecard.html'
    };
});
app.directive('purpleCard', function () {
    return {
        restrict: 'E',
        templateUrl: 'js/common/directives/cards/purplecard.html'
    };
});
app.directive('redCard', function () {
    return {
        restrict: 'E',
        templateUrl: 'js/common/directives/cards/redcard.html'
    };
});
app.directive('addPlayer', function () {
    return {
        restrict: 'E',
        templateUrl: '/js/common/directives/player-register/addPlayer.html'
    };
});
app.directive('scoreBoard', function () {
    return {
        restrict: 'E',
        scope: {
            players: '@'
        },
        link: function link(scope, element, attrs) {},
        templateUrl: 'js/common/directives/scoreboard/scoreboard.html'
    };
});
//# sourceMappingURL=data:application/json;base64,
